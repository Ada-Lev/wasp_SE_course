@article{davila_systematic_2021,
        title = {A systematic literature review and taxonomy of modern code review},
        volume = {177},
        issn = {0164-1212},
        url = {https://www.sciencedirect.com/science/article/pii/S0164121221000480},
        doi = {https://doi.org/10.1016/j.jss.2021.110951},
        abstract = {Context: Modern Code Review (MCR) is a widely known practice of software quality assurance. However, the existing body of knowledge of MCR is currently not understood as a whole. Objective: Our goal is to identify the state of the art on MCR, providing a structured overview and an in-depth analysis of the research done in this field. Methods: We performed a systematic literature review, selecting publications from four digital libraries. Results: A total of 139 papers were selected and analyzed in three main categories. Foundational studies are those that analyze existing or collected data from the adoption of MCR. Proposals consist of techniques and tools to support MCR, while evaluations are studies to assess an approach or compare a set of them. Conclusion: The most represented category is foundational studies, mainly aiming to understand the motivations for adopting MCR, its challenges and benefits, and which influence factors lead to which MCR outcomes. The most common types of proposals are code reviewer recommender and support to code checking. Evaluations of MCR-supporting approaches have been done mostly offline, without involving human subjects. Five main research gaps have been identified, which point out directions for future work in the area.},
        journal = {Journal of Systems and Software},
        author = {Davila, Nicole and Nunes, Ingrid},
        year = {2021},
        keywords = {Modern code review, Software quality, Software verification, Systematic literature review},
        pages = {110951},
}

@inproceedings{bacchelli_expectations_2013,
        title = {Expectations, outcomes, and challenges of modern code review},
        url = {https://doi.org/10.1109/ICSE.2013.6606617},
        booktitle = {2013 35th {International} {Conference} on {Software} {Engineering} ({ICSE})},
        author = {Bacchelli, Alberto and Bird, Christian},
        year = {2013},
        pages = {712--721},
        file = {Full Text:C\:\\Users\\johan\\Zotero\\storage\\H3A2HQT8\\Bacchelli and Bird - 2013 - Expectations, outcomes, and challenges of modern c.pdf:application/pdf},
}

@inproceedings{soderberg_understanding_2022,
        address = {New York, NY, USA},
        series = {{EASE} '22},
        title = {Understanding the {Experience} of {Code} {Review}: {Misalignments}, {Attention}, and {Units} of {Analysis}},
        isbn = {978-1-4503-9613-4},
        url = {https://doi.org/10.1145/3530019.3530037},
        doi = {10.1145/3530019.3530037},
        abstract = {Code review is a common practice in software development and numerous studies have described different aspects of the process; its characteristics, the expectations on that process, issues around reviewer allocation, and more. However, one aspect that has not been studied to a large extent is the experience of the developers in the code review process. This is unfortunate given the significant amount of time that developers spend on this activity, where problems that degrade developers’ experience on a daily basis can create work environment issues. In this paper, we present an extended analysis of an exploratory mixed-method study where we focus on developers’ experience of code review. We use semi-structured interviews to gather data from two multi-national companies and conduct a follow-up survey. Our results suggest that developers are frequently bothered by misalignments in the code review tooling and process which is hindering them in carrying out their code review tasks effectively. We present an initial characterization of misalignments that may hamper the developer experience. Based on our findings, we propose directions for further exploration to improve the developer experience.},
        booktitle = {Proceedings of the {International} {Conference} on {Evaluation} and {Assessment} in {Software} {Engineering} 2022},
        publisher = {Association for Computing Machinery},
        author = {Söderberg, Emma and Church, Luke and Börstler, Jürgen and Niehorster, Diederick and Rydenfält, Christofer},
        year = {2022},
        note = {event-place: Gothenburg, Sweden},
        keywords = {user experience, code review, software development},
        pages = {170--179},
}

@inproceedings{soderberg_whats_2022,
        address = {New York, NY, USA},
        series = {{ICSE}-{SEIP} '22},
        title = {What's {Bothering} {Developers} in {Code} {Review}?},
        isbn = {978-1-4503-9226-6},
        url = {https://doi.org/10.1145/3510457.3513083},
        doi = {10.1145/3510457.3513083},
        abstract = {The practice of code review is widely adopted in industry and has been studied to an increasing degree in the research community. However, the developer experience of code review has received limited attention. Here, we report on initial results from a mixed-method exploratory study of the developer experience.},
        booktitle = {Proceedings of the 44th {International} {Conference} on {Software} {Engineering}: {Software} {Engineering} in {Practice}},
        publisher = {Association for Computing Machinery},
        author = {Söderberg, Emma and Church, Luke and Börstler, Jürgen and Niehorster, Diederick C. and Rydenfält, Christofer},
        year = {2022},
        note = {event-place: Pittsburgh, Pennsylvania},
        keywords = {user experience, code review, software development},
        pages = {341--342},
        file = {Full Text:C\:\\Users\\johan\\Zotero\\storage\\6MPN382A\\Söderberg et al. - 2022 - What's Bothering Developers in Code Review.pdf:application/pdf},
}

@inproceedings{brothers_icicle_1990,
        address = {New York, NY, USA},
        series = {{CSCW} '90},
        title = {{ICICLE}: {Groupware} for {Code} {Inspection}},
        isbn = {0-89791-402-3},
        url = {https://doi.org/10.1145/99332.99353},
        doi = {10.1145/99332.99353},
        abstract = {ICICLE1 (“Intelligent Code Inspection Environment in a C Language Environment”) is a multifarious software system intended to augment the process of formal code inspection. It offers assistance in a number of activities, including knowledge-based analysis and annotations of source code, and computer supported cooperative discussion and finalization of inspectors' comments during inspection meetings. This paper reports the implementation of ICICLE and GroupWare issues encountered during testing; it is directed towards an audience interested in the implementation of GroupWare as well as those concerned with usability of software systems for computer-supported cooperative work (CSCW).},
        booktitle = {Proceedings of the 1990 {ACM} {Conference} on {Computer}-{Supported} {Cooperative} {Work}},
        publisher = {Association for Computing Machinery},
        author = {Brothers, L. and Sembugamoorthy, V. and Muller, M.},
        year = {1990},
        note = {event-place: Los Angeles, California, USA},
        pages = {169--181},
        file = {Full Text:C\:\\Users\\johan\\Zotero\\storage\\APMJPQ5Q\\Brothers et al. - 1990 - ICICLE Groupware for Code Inspection.pdf:application/pdf},
}

@inproceedings{green1991comprehensibility,
  title={Comprehensibility of visual and textual programs: A test of superlativism against the’match-mismatch’conjecture},
  author={Green, Thomas RG and Petre, Marian and Bellamy, Rachel KE and others},
  booktitle={Empirical studies of programmers: Fourth workshop},
  volume={121146},
  year={1991},
  organization={Ablex Publishing, Norwood, NJ}
}


@inproceedings{kononenko_code_2016,
	location = {New York, {NY}, {USA}},
	title = {Code Review Quality: How Developers See It},
	isbn = {978-1-4503-3900-1},
	url = {https://doi.org/10.1145/2884781.2884840},
	doi = {10.1145/2884781.2884840},
	series = {{ICSE} '16},
	abstract = {In a large, long-lived project, an effective code review process is key to ensuring the long-term quality of the code base. In this work, we study code review practices of a large, open source project, and we investigate how the developers themselves perceive code review quality. We present a qualitative study that summarizes the results from a survey of 88 Mozilla core developers. The results provide developer insights into how they define review quality, what factors contribute to how they evaluate submitted code, and what challenges they face when performing review tasks. We found that the review quality is primarily associated with the thoroughness of the feedback, the reviewer's familiarity with the code, and the perceived quality of the code itself. Also, we found that while different factors are perceived to contribute to the review quality, reviewers often find it difficult to keep their technical skills up-to-date, manage personal priorities, and mitigate context switching.},
	pages = {1028--1038},
	booktitle = {Proceedings of the 38th International Conference on Software Engineering},
	publisher = {Association for Computing Machinery},
	author = {Kononenko, Oleksii and Baysal, Olga and Godfrey, Michael W.},
	date = {2016},
	note = {event-place: Austin, Texas},
	keywords = {code review, developer perception, review quality, survey},
}

@inproceedings{bosu_characteristics_2015,
	title = {Characteristics of Useful Code Reviews: An Empirical Study at Microsoft},
	isbn = {978-0-7695-5594-2},
	url = {https://dl.acm.org/doi/10.5555/2820518.2820538},
	series = {{MSR} '15},
	abstract = {Over the past decade, both open source and commercial software projects have adopted contemporary peer code review practices as a quality control mechanism. Prior research has shown that developers spend a large amount of time and effort performing code reviews. Therefore, identifying factors that lead to useful code reviews can benefit projects by increasing code review effectiveness and quality. In a three-stage mixed research study, we qualitatively investigated what aspects of code reviews make them useful to developers, used our findings to build and verify a classification model that can distinguish between useful and not useful code review feedback, and finally we used this classifier to classify review comments enabling us to empirically investigate factors that lead to more effective code review feedback.In total, we analyzed 1.5 millions review comments from five Microsoft projects and uncovered many factors that affect the usefulness of review feedback. For example, we found that the proportion of useful comments made by a reviewer increases dramatically in the first year that he or she is at Microsoft but tends to plateau afterwards. In contrast, we found that the more files that are in a change, the lower the proportion of comments in the code review that will be of value to the author of the change. Based on our findings, we provide recommendations for practitioners to improve effectiveness of code reviews.},
	pages = {146--156},
	booktitle = {Proceedings of the 12th Working Conference on Mining Software Repositories},
	publisher = {{IEEE} Press},
	author = {Bosu, Amiangshu and Greiler, Michaela and Bird, Christian},
	date = {2015},
	note = {event-place: Florence, Italy},
}

@article{macleod_code_2018,
	title = {Code Reviewing in the Trenches: Challenges and Best Practices},
	volume = {35},
	url = {https://doi.org/10.1109/MS.2017.265100500},
	doi = {10.1109/MS.2017.265100500},
	pages = {34--42},
	number = {4},
	journaltitle = {{IEEE} Software},
	author = {{MacLeod}, Laura and Greiler, Michaela and Storey, Margaret-Anne and Bird, Christian and Czerwonka, Jacek},
	date = {2018},
}

@inproceedings{alami_why_2019,
	title = {Why Does Code Review Work for Open Source Software Communities?},
	url = {https://doi.org/10.1109/ICSE.2019.00111},
	doi = {10.1109/ICSE.2019.00111},
	pages = {1073--1083},
	booktitle = {2019 {IEEE}/{ACM} 41st International Conference on Software Engineering ({ICSE})},
	author = {Alami, Adam and Leavitt Cohn, Marisa and Wasowski, Andrzej},
	date = {2019},
	keywords = {code review, want to read},
}

@inproceedings{sadowski_modern_2018,
	location = {New York, {NY}, {USA}},
	title = {Modern Code Review: A Case Study at Google},
	isbn = {978-1-4503-5659-6},
	url = {https://doi.org/10.1145/3183519.3183525},
	doi = {10.1145/3183519.3183525},
	series = {{ICSE}-{SEIP} '18},
	abstract = {Employing lightweight, tool-based code review of code changes (aka modern code review) has become the norm for a wide variety of open-source and industrial systems. In this paper, we make an exploratory investigation of modern code review at Google. Google introduced code review early on and evolved it over the years; our study sheds light on why Google introduced this practice and analyzes its current status, after the process has been refined through decades of code changes and millions of code reviews. By means of 12 interviews, a survey with 44 respondents, and the analysis of review logs for 9 million reviewed changes, we investigate motivations behind code review at Google, current practices, and developers' satisfaction and challenges.},
	pages = {181--190},
	booktitle = {Proceedings of the 40th International Conference on Software Engineering: Software Engineering in Practice},
	publisher = {Association for Computing Machinery},
	author = {Sadowski, Caitlin and Söderberg, Emma and Church, Luke and Sipko, Michal and Bacchelli, Alberto},
	date = {2018},
	note = {event-place: Gothenburg, Sweden},
}

@article{dos_santos_investigating_2018,
	title = {Investigating the effectiveness of peer code review in distributed software development based on objective and subjective data},
	volume = {6},
	url = {https://doi.org/10.1186/s40411-018-0058-0},
	journaltitle = {Journal of Software Engineering Research and Development},
	author = {dos Santos, Eduardo Witter and Nunes, Ingrid},
	date = {2018},
}

@inproceedings{alzahrani_impact_2022,
	title = {Impact of animated objects on autistic and non-autistic users},
	url = {https://doi.org/10.1145/3510458.3513007},
	doi = {10.1145/3510458.3513007},
	pages = {102--112},
	booktitle = {2022 {IEEE}/{ACM} 44th International Conference on Software Engineering: Software Engineering in Society ({ICSE}-{SEIS})},
	author = {Alzahrani, Mona and Uitdenbogerd, Alexandra L. and Spichkova, Maria},
	date = {2022},
	keywords = {user experience, want to read, autism},
}

@article{keshav_how_2007,
	title = {How to Read a Paper},
	volume = {37},
	issn = {0146-4833},
	url = {https://doi.org/10.1145/1273445.1273458},
	doi = {10.1145/1273445.1273458},
	abstract = {Researchers spend a great deal of time reading research papers. However, this skill is rarely taught, leading to much wasted effort. This article outlines a practical and efficient three-pass method for reading research papers. I also describe how to use this method to do a literature survey.},
	pages = {83--84},
	number = {3},
	journaltitle = {{SIGCOMM} Comput. Commun. Rev.},
	author = {Keshav, S.},
	date = {2007-07},
	note = {Place: New York, {NY}, {USA}
Publisher: Association for Computing Machinery},
	keywords = {hints, paper, reading},
}

@inproceedings{ebert_confusion_2019,
	title = {Confusion in Code Reviews: Reasons, Impacts, and Coping Strategies},
	url = {https://doi.org/0.1109/SANER.2019.8668024},
	pages = {49--60},
	booktitle = {2019 {IEEE} 26th International Conference on Software Analysis, Evolution and Reengineering ({SANER})},
	author = {Ebert, Felipe and Castor, Fernando and Novielli, Nicole and Serebrenik, Alexander},
	date = {2019},
}

@inproceedings{baysal_secret_2012,
	title = {The Secret Life of Patches: A Firefox Case Study},
	doi = {10.1109/WCRE.2012.54},
	pages = {447--455},
	booktitle = {2012 19th Working Conference on Reverse Engineering},
	author = {Baysal, Olga and Kononenko, Oleksii and Holmes, Reid and Godfrey, Michael W.},
	date = {2012},
}

@inproceedings{ueda_impact_2018,
	title = {Impact of Coding Style Checker on Code Review - A Case Study on the {OpenStack} Projects},
	url = {https://doi.org/10.1109/IWESEP.2018.00014},
	pages = {31--36},
	booktitle = {2018 9th International Workshop on Empirical Software Engineering in Practice ({IWESEP})},
	author = {Ueda, Yuki and Ihara, Akinori and Ishio, Takashi and Matsumoto, Kennichi},
	date = {2018},
}

@misc{etemadi_augmenting_2022,
	title = {Augmenting Diffs With Runtime Information},
	rights = {Creative Commons Zero v1.0 Universal},
	url = {https://doi.org/10.48550/arxiv.2212.11077},
	publisher = {{arXiv}},
	author = {Etemadi, Khashayar and Sharma, Aman and Madeiral, Fernanda and Monperrus, Martin},
	date = {2022},
	keywords = {{FOS}: Computer and information sciences, Software Engineering (cs.{SE})},
}

@article{baysal_investigating_2016,
	title = {Investigating technical and non-technical factors influencing modern code review},
	volume = {21},
	issn = {1573-7616},
	url = {https://doi.org/10.1007/s10664-015-9366-8},
	doi = {10.1007/s10664-015-9366-8},
	abstract = {When submitting patches for code review, individual developers are primarily interested in maximizing the chances of their patch being accepted in the least time possible. In principle, code review is a transparent process in which reviewers aim to assess the qualities of the patch on its technical merits in a timely manner; however, in practice the execution of this process can be affected by a variety of factors, some of which are external to the technical content of the patch itself. In this paper, we describe empirical studies of the code review processes for large, open source projects such as {WebKit} and Google Blink. We first consider factors that have been examined in previous studies — patch size, priority, and component — and then extend our enquiries to explore the effects of organization (which company is involved) and developer profile (review load and activity, patch writer experience) on code review response time and eventual outcome. Our approach uses a reverse engineered model of the patch submission process, and extracts key information from the issue-tracking and code review systems. Our findings suggest that these non-technical factors can significantly impact code review outcomes.},
	pages = {932--959},
	number = {3},
	journaltitle = {Empirical Software Engineering},
	author = {Baysal, Olga and Kononenko, Oleksii and Holmes, Reid and Godfrey, Michael W.},
	date = {2016-06-01},
}

@article{liu_atom_2022,
	title = {{ATOM}: Commit Message Generation Based on Abstract Syntax Tree and Hybrid Ranking},
	volume = {48},
	url = {https://doi.org/10.1109/TSE.2020.3038681},
	pages = {1800--1817},
	number = {5},
	journaltitle = {{IEEE} Transactions on Software Engineering},
	author = {Liu, Shangqing and Gao, Cuiyun and Chen, Sen and Nie, Lun Yiu and Liu, Yang},
	date = {2022},
}

@article{fang_prhan_2022,
	title = {{PRHAN}: Automated Pull Request Description Generation Based on Hybrid Attention Network},
	volume = {185},
	issn = {0164-1212},
	url = {https://www.sciencedirect.com/science/article/pii/S016412122100248X},
	doi = {https://doi.org/10.1016/j.jss.2021.111160},
	pages = {111160},
	journaltitle = {Journal of Systems and Software},
	author = {Fang, Sen and Zhang, Tao and Tan, You-Shuai and Xu, Zhou and Yuan, Zhi-Xin and Meng, Ling-Ze},
	date = {2022},
	keywords = {Byte-pair encoding, Hybrid attention, Label smoothing, {PR} description},
}

@misc{rule_ten_2018,
	title = {Ten Simple Rules for Reproducible Research in Jupyter Notebooks},
	rights = {Creative Commons Attribution 4.0 International},
	url = {https://arxiv.org/abs/1810.08055},
	publisher = {{arXiv}},
	author = {Rule, Adam and Birmingham, Amanda and Zuniga, Cristal and Altintas, Ilkay and Huang, Shih-Cheng and Knight, Rob and Moshiri, Niema and Nguyen, Mai H. and Rosenthal, Sara Brin and Pérez, Fernando and Rose, Peter W.},
	date = {2018},
	doi = {10.48550/ARXIV.1810.08055},
	keywords = {Computers and Society (cs.{CY}), {FOS}: Computer and information sciences, Other Computer Science (cs.{OH})},
}

@article{cochrane_writing_2005,
	title = {Writing Tips for Ph. D. Students},
	url = {https://tertilt.vwl.uni-mannheim.de/phd/phd_paper_writing.pdf},
	author = {Cochrane, John H},
	date = {2005},
	note = {Publisher: University of Chicago Chicago, {IL}},
}

@article{sandve_ten_2013,
	title = {Ten Simple Rules for Reproducible Computational Research},
	volume = {9},
	url = {https://doi.org/10.1371/journal.pcbi.1003285},
	doi = {10.1371/journal.pcbi.1003285},
	abstract = {null},
	pages = {1--4},
	number = {10},
	journaltitle = {{PLOS} Computational Biology},
	author = {Sandve, Geir Kjetil and Nekrutenko, Anton and Taylor, James and Hovig, Eivind},
	date = {2013-10},
	note = {Publisher: Public Library of Science},
}

@article{bird_taking_2023,
	title = {Taking Flight with Copilot: Early Insights and Opportunities of {AI}-Powered Pair-Programming Tools},
	volume = {20},
	issn = {1542-7730},
	url = {https://doi.org/10.1145/3582083},
	doi = {10.1145/3582083},
	abstract = {Over the next five years, {AI}-powered tools likely will be helping developers in many diverse tasks. For example, such models may be used to improve code review, directing reviewers to parts of a change where review is most needed or even directly providing feedback on changes. Models such as Codex may suggest fixes for defects in code, build failures, or failing tests. These models are able to write tests automatically, helping to improve code quality and downstream reliability of distributed systems. This study of Copilot shows that developers spend more time reviewing code than actually writing code. As {AI}-powered tools are integrated into more software development tasks, developer roles will shift so that more time is spent assessing suggestions related to the task than doing the task itself.},
	pages = {35--57},
	number = {6},
	journaltitle = {Queue},
	author = {Bird, Christian and Ford, Denae and Zimmermann, Thomas and Forsgren, Nicole and Kalliamvakou, Eirini and Lowdermilk, Travis and Gazit, Idan},
	date = {2023-01},
	note = {Place: New York, {NY}, {USA}
Publisher: Association for Computing Machinery},
}

@article{gunawardena_concerns_2023,
	title = {Concerns identified in code review: A fine-grained, faceted classification},
	volume = {153},
	issn = {0950-5849},
	url = {https://www.sciencedirect.com/science/article/pii/S0950584922001653},
	doi = {https://doi.org/10.1016/j.infsof.2022.107054},
	abstract = {Context: Code review is a valuable software process that helps software practitioners to identify a variety of defects in code. Even though many code review tools and static analysis tools used to improve the efficiency of the process exist, code review is still costly. Objective: Understanding the types of defects that code reviews help to identify could reveal other means of cost improvement. Thus, our goal was to identify defect types detected in real-world code reviews, and the extent to which code review can be benefited from defect detection tools. Method: To this end, we classified 417 comments from code reviews of 7 {OSS} Java projects using thematic analysis. Results: We identified 116 defect types that we grouped into 15 groups to create a defect classification. Additionally, 38\% of these defects could be automatically detected accurately. Conclusion: We learnt that even though many capable defect detection tools are available today, a substantial amount of defects that can be detected automatically, reach code review. Also, we identified several code review cost reduction opportunities.},
	pages = {107054},
	journaltitle = {Information and Software Technology},
	author = {Gunawardena, Sanuri and Tempero, Ewan and Blincoe, Kelly},
	date = {2023},
	keywords = {Code inspection, Code review, Concerns, Decisions, Defects, Detection expertise, Detection method, Manual classification, Non-programmers, Types},
}

@inproceedings{miller_did_2022,
	location = {New York, {NY}, {USA}},
	title = {"Did You Miss My Comment or What?": Understanding Toxicity in Open Source Discussions},
	isbn = {978-1-4503-9221-1},
	url = {https://doi.org/10.1145/3510003.3510111},
	doi = {10.1145/3510003.3510111},
	series = {{ICSE} '22},
	abstract = {Online toxicity is ubiquitous across the internet and its negative impact on the people and that online communities that it effects has been well documented. However, toxicity manifests differently on various platforms and toxicity in open source communities, while frequently discussed, is not well understood. We take a first stride at understanding the characteristics of open source toxicity to better inform future work on designing effective intervention and detection methods. To this end, we curate a sample of 100 toxic {GitHub} issue discussions combining multiple search and sampling strategies. We then qualitatively analyze the sample to gain an understanding of the characteristics of open-source toxicity. We find that the pervasive forms of toxicity in open source differ from those observed on other platforms like Reddit or Wikipedia. In our sample, some of the most prevalent forms of toxicity are entitled, demanding, and arrogant comments from project users as well as insults arising from technical disagreements. In addition, not all toxicity was written by people external to the projects; project members were also common authors of toxicity. We also discuss the implications of our findings. Among others we hope that our findings will be useful for future detection work.},
	pages = {710--722},
	booktitle = {Proceedings of the 44th International Conference on Software Engineering},
	publisher = {Association for Computing Machinery},
	author = {Miller, Courtney and Cohen, Sophie and Klug, Daniel and Vasilescu, Bogdan and {KaUstner}, Christian},
	date = {2022},
	note = {event-place: Pittsburgh, Pennsylvania},
}

@inproceedings{de_souza_santos_grounded_2022,
	location = {New York, {NY}, {USA}},
	title = {A Grounded Theory of Coordination in Remote-First and Hybrid Software Teams},
	isbn = {978-1-4503-9221-1},
	url = {https://doi.org/10.1145/3510003.3510105},
	doi = {10.1145/3510003.3510105},
	series = {{ICSE} '22},
	abstract = {While the long-term effects of the {COVID}-19 pandemic on software professionals and organizations are difficult to predict, it seems likely that working from home, remote-first teams, distributed teams, and hybrid (part-remote/part-office) teams will be more common. It is therefore important to investigate the challenges that software teams and organizations face with new remote and hybrid work. Consequently, this paper reports a year-long, participant-observation, constructivist grounded theory study investigating the impact of working from home on software development. This study resulted in a theory of software team coordination. Briefly, shifting from in-office to at-home work fundamentally altered coordination within software teams. While group cohesion and more effective communication appear protective, coordination is undermined by distrust, parenting and communication bricolage. Poor coordination leads to numerous problems including misunderstandings, help requests, lower job satisfaction among team members, and more ill-defined tasks. These problems, in turn, reduce overall project success and prompt professionals to alter their software development processes (in this case, from Scrum to Kanban). Our findings suggest that software organizations with many remote employees can improve performance by encouraging greater engagement within teams and supporting employees with family and childcare responsibilities.},
	pages = {25--35},
	booktitle = {Proceedings of the 44th International Conference on Software Engineering},
	publisher = {Association for Computing Machinery},
	author = {de Souza Santos, Ronnie E. and Ralph, Paul},
	date = {2022},
	note = {event-place: Pittsburgh, Pennsylvania},
	keywords = {agile methods, coordination, {COVID}-19, grounded theory, remote work, software development, work-from-home},
}

@inproceedings{tufano_using_2022,
	location = {New York, {NY}, {USA}},
	title = {Using Pre-Trained Models to Boost Code Review Automation},
	isbn = {978-1-4503-9221-1},
	url = {https://doi.org/10.1145/3510003.3510621},
	doi = {10.1145/3510003.3510621},
	series = {{ICSE} '22},
	abstract = {Code review is a practice widely adopted in open source and industrial projects. Given the non-negligible cost of such a process, researchers started investigating the possibility of automating specific code review tasks. We recently proposed Deep Learning ({DL}) models targeting the automation of two tasks: the first model takes as input a code submitted for review and implements in it changes likely to be recommended by a reviewer; the second takes as input the submitted code and a reviewer comment posted in natural language and automatically implements the change required by the reviewer. While the preliminary results we achieved are encouraging, both models had been tested in rather simple code review scenarios, substantially simplifying the targeted problem. This was also due to the choices we made when designing both the technique and the experiments. In this paper, we build on top of that work by demonstrating that a pre-trained Text-To-Text Transfer Transformer (T5) model can outperform previous {DL} models for automating code review tasks. Also, we conducted our experiments on a larger and more realistic (and challenging) dataset of code review activities.},
	pages = {2291--2302},
	booktitle = {Proceedings of the 44th International Conference on Software Engineering},
	publisher = {Association for Computing Machinery},
	author = {Tufano, Rosalia and Masiero, Simone and Mastropaolo, Antonio and Pascarella, Luca and Poshyvanyk, Denys and Bavota, Gabriele},
	date = {2022},
	note = {event-place: Pittsburgh, Pennsylvania},
	keywords = {code review, empirical study, machine learning on code},
}

@article{mantzalas_conceptual_2022,
	title = {A conceptual model of risk and protective factors for autistic burnout},
	volume = {15},
	issn = {1939-3792, 1939-3806},
	url = {https://onlinelibrary.wiley.com/doi/10.1002/aur.2722},
	doi = {10.1002/aur.2722},
	pages = {976--987},
	number = {6},
	journaltitle = {Autism Research},
	shortjournal = {Autism Research},
	author = {Mantzalas, Jane and Richdale, Amanda L. and Dissanayake, Cheryl},
	urldate = {2023-02-15},
	date = {2022-06},
	langid = {english},
}

@article{bianchi_is_2014,
	title = {Is burnout a depressive disorder? A reexamination with special focus on atypical depression},
	volume = {21},
	issn = {1573-3424},
	url = {https://doi.org/10.1037/a0037906},
	doi = {10.1037/a0037906},
	shorttitle = {Is burnout a depressive disorder?},
	abstract = {Whether burnout and depression cover the same psychopathology remains to be elucidated. To date, subtypes of depression have been overlooked in research on the burnout–depression overlap. Our aim was to estimate the prevalence of depressive disorders in workers with burnout while examining the overlap of burnout with the atypical subtype of depression. The present study included 5,575 schoolteachers (mean age = 41 years; 78\% female). Burnout was assessed with the Maslach Burnout Inventory. Depression was measured with the 9-item depression scale of the Patient Health Questionnaire ({PHQ}-9). Atypical features of depression were examined using a dedicated module, referenced to the Diagnostic and Statistical Manual of Mental Disorders (4th ed.; American Psychiatric Association, 1994). We found that 90\% of the teachers identified as burned out met diagnostic criteria for depression. Among them, 92\% scored 15 or higher on the {PHQ}-9, a threshold at which active treatment with pharmacotherapy and/or psychotherapy is recommended. The features of atypical depression were observed in 63\% of the burned-out participants with major depression. Emotional exhaustion, the hallmark of burnout, was more strongly associated with depression than with depersonalization and reduced personal accomplishment, the 2 other putative dimensions of burnout. The present study suggests that the burnout–depression overlap has been largely underestimated. Atypical depression may account for a substantial part of this overlap. Overall, our findings point to depressive symptoms and depressive disorders as central concerns in the management of burnout. The clinical research on treatments for depression offers solutions that may help workers identified as burned out. ({PsycINFO} Database Record (c) 2016 {APA}, all rights reserved)},
	pages = {307--324},
	journaltitle = {International Journal of Stress Management},
	author = {Bianchi, Renzo and Schonfeld, Irvin Sam and Laurent, Eric},
	date = {2014},
	note = {Place: {US}
Publisher: Educational Publishing Foundation},
	keywords = {Atypical Depression, Major Depression, Occupational Stress, Psychopathology, Subtypes (Disorders), Teachers},
	file = {Full Text:/home/johan/Zotero/storage/7HG2U5D7/Bianchi et al. - 2014 - Is burnout a depressive disorder A reexamination .pdf:application/pdf;Snapshot:/home/johan/Zotero/storage/M8WESAAH/2014-37938-001.html:text/html},
}

@article{baumeister_ego_1998,
	title = {Ego Depletion: Is the Active Self a Limited Resource?},
	volume = {74},
	pages = {1252--1265},
	number = {5},
	journaltitle = {Journal of Personality and Social Psychology},
	author = {Baumeister, Roy E and Bratslavsky, Ellen and Muraven, Mark and Tice, Dianne M},
	date = {1998},
}

@book{ahrens_how_2022,
	title = {How to take smart notes: One simple technique to boost writing, learning and thinking},
	publisher = {Sönke Ahrens},
	author = {Ahrens, Sönke},
	date = {2022},
}

@article{okun_white_2000,
	title = {White supremacy culture},
	journaltitle = {Dismantling racism: A workbook for social change groups, Durham, {NC}: Change Work. Retrieved from http://www. dismantlingracism. org/Dismantling\_Racism/{liNKs}\_files/whitesupcul09. pdf},
	author = {Okun, Tema and Jones, Kenneth},
	date = {2000},
}

@book{gunasinghe_language_2022,
	location = {Berkeley, {CA}},
	title = {Language Server Protocol and Implementation: Supporting Language-Smart Editing and Programming Tools},
	isbn = {978-1-4842-7791-1 978-1-4842-7792-8},
	url = {https://link.springer.com/10.1007/978-1-4842-7792-8},
	shorttitle = {Language Server Protocol and Implementation},
	publisher = {Apress},
	author = {Gunasinghe, Nadeeshaan and Marcus, Nipuna},
	urldate = {2023-02-16},
	date = {2022},
	langid = {english},
	doi = {10.1007/978-1-4842-7792-8},
	keywords = {Code editors, Completions, Interactive Developer Environment ({IDE}), Language Intelligence, Language Intelligence Tools, Language Server, Language Server Extensions, Language Server Protocal, Language Service, {LSP}, Plugins, Standard I/O, Websocket},
}

@incollection{velichkovsky_towards_1997,
	location = {Boston, {MA}},
	title = {Towards gaze-mediated interaction: Collecting solutions of the “Midas touch problem”},
	isbn = {978-0-387-35175-9},
	url = {https://doi.org/10.1007/978-0-387-35175-9_77},
	abstract = {For a development of truly user-centered interfaces we need to take into account not only generic characteristics of human beings but also actual dynamics of attention and intentions of persons involved in an interaction. Modern eyetracking methods are indispensable tools in such a development, as they allow the use of eye movement data for control of output devices, for gaze-contingent image processing and for desambiguation of verbal as well as nonverbal information. The main obstacle on the way to these applications is the so-called “Midas touch problem”: how to differentiate “attentive” saccades with intended goal of communication from the lower level eye movements that are just random or provoked by external stimulation? We report results of our investigations of the problem and present a solution based on a functional classification of fixations correlated with their duration. Several additional solutions are also considered together with the data on the trainability of the human oculomotor system.},
	pages = {509--516},
	booktitle = {Human-Computer Interaction {INTERACT} '97: {IFIP} {TC}13 International Conference on Human-Computer Interaction, 14th–18th July 1997, Sydney, Australia},
	publisher = {Springer {US}},
	author = {Velichkovsky, Boris and Sprenger, Andreas and Unema, Pieter},
	editor = {Howard, Steve and Hammond, Judy and Lindgaard, Gitte},
	date = {1997},
	doi = {10.1007/978-0-387-35175-9_77},
}

@inproceedings{mohan_dualgaze_2018,
	title = {{DualGaze}: Addressing the Midas Touch Problem in Gaze Mediated {VR} Interaction},
	doi = {10.1109/ISMAR-Adjunct.2018.00039},
	pages = {79--84},
	booktitle = {2018 {IEEE} International Symposium on Mixed and Augmented Reality Adjunct ({ISMAR}-Adjunct)},
	author = {Mohan, Pallavi and Goh, Wooi Boon and Fu, Chi-Wing and Yeung, Sai-Kit},
	date = {2018},
}

@article{jacob_what_2016,
	title = {What You Look at is What You Get: Gaze-Based User Interfaces},
	volume = {23},
	issn = {1072-5520},
	url = {https://doi.org/10.1145/2978577},
	doi = {10.1145/2978577},
	abstract = {Envisioning, designing, and implementing the user interface require a comprehensive understanding of interaction technologies. In this forum we scout trends and discuss new technologies with the potential to influence interaction design. — Albrecht Schmidt, Editor},
	pages = {62--65},
	number = {5},
	journaltitle = {Interactions},
	author = {Jacob, Rob and Stellmach, Sophie},
	date = {2016-08},
	note = {Place: New York, {NY}, {USA}
Publisher: Association for Computing Machinery},
}

@inproceedings{stellmach_look_2012,
	location = {New York, {NY}, {USA}},
	title = {Look \& Touch: Gaze-Supported Target Acquisition},
	isbn = {978-1-4503-1015-4},
	url = {https://doi.org/10.1145/2207676.2208709},
	doi = {10.1145/2207676.2208709},
	series = {{CHI} '12},
	abstract = {While eye tracking has a high potential for fast selection tasks, it is often regarded as error-prone and unnatural, especially for gaze-only interaction. To improve on that, we propose gaze-supported interaction as a more natural and effective way combining a user's gaze with touch input from a handheld device. In particular, we contribute a set of novel and practical gaze-supported selection techniques for distant displays. Designed according to the principle gaze suggests, touch confirms they include an enhanced gaze-directed cursor, local zoom lenses and more elaborated techniques utilizing manual fine positioning of the cursor via touch. In a comprehensive user study with 24 participants, we investigated the potential of these techniques for different target sizes and distances. All novel techniques outperformed a simple gaze-directed cursor and showed individual advantages. In particular those techniques using touch for fine cursor adjustments ({MAGIC} touch) and for cycling through a list of possible close-to-gaze targets ({MAGIC} tab) demonstrated a high overall performance and usability.},
	pages = {2981--2990},
	booktitle = {Proceedings of the {SIGCHI} Conference on Human Factors in Computing Systems},
	publisher = {Association for Computing Machinery},
	author = {Stellmach, Sophie and Dachselt, Raimund},
	date = {2012},
	note = {event-place: Austin, Texas, {USA}},
	keywords = {gaze input, gaze-supported interaction, mobile touch interaction, selection, target acquisition},
}

@inproceedings{jacob_what_1990,
	location = {New York, {NY}, {USA}},
	title = {What You Look at is What You Get: Eye Movement-Based Interaction Techniques},
	isbn = {0-201-50932-6},
	url = {https://doi.org/10.1145/97243.97246},
	doi = {10.1145/97243.97246},
	series = {{CHI} '90},
	abstract = {In seeking hitherto-unused methods by which users and computers can communicate, we investigate the usefulness of eye movements as a fast and convenient auxiliary user-to-computer communication mode. The barrier to exploiting this medium has not been eye-tracking technology but the study of interaction techniques that incorporate eye movements into the user-computer dialogue in a natural and unobtrusive way. This paper discusses some of the human factors and technical considerations that arise in trying to use eye movements as an input medium, describes our approach and the first eye movement-based interaction techniques that we have devised and implemented in our laboratory, and reports our experiences and observations on them.},
	pages = {11--18},
	booktitle = {Proceedings of the {SIGCHI} Conference on Human Factors in Computing Systems},
	publisher = {Association for Computing Machinery},
	author = {Jacob, Robert J. K.},
	date = {1990},
	note = {event-place: Seattle, Washington, {USA}},
}

@video{ferguson_everything_nodate,
	title = {Everything is a Remix},
	url = {https://www.youtube.com/watch?v=nJPERZDfyWc},
	author = {Ferguson, Kirby},
}

@thesis{riouak_declarative_2023,
	title = {Declarative Specification of Intraprocedural Control-flow and Dataflow Analysis},
	url = {https://portal.research.lu.se/sv/publications/declarative-specification-of-intraprocedural-control-flow-and-dat},
	abstract = {Static program analysis plays a crucial role in ensuring the quality and security of software applications by detecting and fixing bugs, and potential security vulnerabilities in the code. The use of declarative paradigms in dataflow analysis as part of static program analysis has become increasingly popular in recent years. This is due to its enhanced expressivity and modularity, allowing for a higher-level programming approach, resulting in easy and efficient development.The aim of this thesis is to explore the design and implementation of control-flow and dataflow analyses using the declarative Reference Attribute Grammars formalism. Specifically, we focus on the construction of analyses directly on the source code rather than on an intermediate representation.The main result of this thesis is our language-agnostic framework, called {IntraCFG}. {IntraCFG} enables efficient and effective dataflow analysis by allowing the construction of precise and source-level control-flow graphs. The framework superimposes control-flow graphs on top of the abstract syntax tree of the program. The effectiveness of {IntraCFG} is demonstrated through two case studies, {IntraJ} and {IntraTeal}. These case studies showcase the potential and flexibility of {IntraCFG} in diverse contexts, such as bug detection and education. {IntraJ} supports the Java programming language, while {IntraTeal} is a tool designed for teaching program analysis for an educational language, Teal.{IntraJ} has proven to be faster than and as precise as well-known industrial tools. The combination of precision, performance, and on-demand evaluation in {IntraJ} leads to low latency in querying the analysis results. This makes {IntraJ} a suitable tool for use in interactive tools. Preliminary experiments have also been conducted to demonstrate how {IntraJ} can be used to support interactive bug detection and fixing.Additionally, this thesis presents {JFeature}, a tool for automatically extracting and summarising the features of a Java corpus, including the use of different Java features (e.g., use of Lambda Expressions) across different Java versions. {JFeature} provides researchers and developers with a deeper understanding of the characteristics of corpora, enabling them to identify suitable benchmarks for the evaluation of their tools and methodologies.},
	type = {phdthesis},
	author = {Riouak, Idriss},
	date = {2023-02-17},
	note = {{ISBN}: 978-91-8039-587-8},
	keywords = {Bug detection, Control flow analysis, Data flow analysis, Declarative paradigms, Interactive bug detection and fixing, {IntraCFG} framework, {IntraJ} Static Analyser, {JFeature} Static Analyser, Reference Attribute Grammars, Static program analysis},
}

@article{goncalves_explicit_2022,
	title = {Do explicit review strategies improve code review performance? Towards understanding the role of cognitive load},
	volume = {27},
	issn = {1573-7616},
	url = {https://doi.org/10.1007/s10664-022-10123-8},
	doi = {10.1007/s10664-022-10123-8},
	abstract = {Code review is an important process in software engineering – yet, a very expensive one. Therefore, understanding code review and how to improve reviewers’ performance is paramount. In the study presented in this work, we test whether providing developers with explicit reviewing strategies improves their review effectiveness and efficiency. Moreover, we verify if review guidance lowers developers’ cognitive load. We employ an experimental design where professional developers have to perform three code review tasks. Participants are assigned to one of three treatments: ad hoc reviewing, checklist, and guided checklist. The guided checklist was developed to provide an explicit reviewing strategy to developers. While the checklist is a simple form of signaling (a method to reduce cognitive load), the guided checklist incorporates further methods to lower cognitive demands of the task such as segmenting and weeding. The majority of the participants are novice reviewers with low or no code review experience. Our results indicate that the guided checklist is a more effective aid for a simple review,while the checklist supports reviewers’ efficiency and effectiveness in a complex task. However, we did not identify a strong relationship between the guidance provided and code review performance. The checklist has the potential to lower developers’ cognitive load, but higher cognitive load led to better performance possibly due to the generally low effectiveness and efficiency of the study participants. Data and materials: https://doi.org/10.5281/zenodo.5653341. Registered report: https://doi.org/10.17605/{OSF}.{IO}/5FPTJ.},
	pages = {99},
	number = {4},
	journaltitle = {Empirical Software Engineering},
	shortjournal = {Empirical Software Engineering},
	author = {Gonçalves, Pavlína Wurzel and Fregnan, Enrico and Baum, Tobias and Schneider, Kurt and Bacchelli, Alberto},
	date = {2022-05-07},
}

@incollection{matthews_stress_2020,
	location = {New York,  {NY},  {US}},
	title = {Stress, skilled performance, and expertise: Overload and beyond.},
	isbn = {9780198795872 (Paperback)},
	abstract = {In this chapter, expertise is defined as competence in the cognitive and/or psychomotor skills central to accomplishing performance goals across a range of applied domains. The chapter will explore the utility and limitations of the overload metaphor in understanding expert performance under stress across multiple applied domains. We will introduce a simplified overload model that expresses domain-general principles. If stress overloads working memory ({WM}) or attention, both immediate performance and capacity for skill learning may be impaired. We also survey some of the complexities of the stress literature, including individual difference factors, and the empirical evidence on stress and performance. We then turn to methodological issues, especially techniques for measuring stress in the performance context, and the challenge of the divergence of different stress indices. The final part of this chapter reviews studies of stress, skilled performance, and expertise in four domains of application: test anxiety, sports performance, surgery, and vehicle driving. We will examine the extent to which a general overload model captures the main empirical findings and supports practical interventions. ({PsycInfo} Database Record (c) 2022 {APA}, all rights reserved)},
	pages = {490--524},
	booktitle = {The Oxford handbook of expertise.},
	publisher = {Oxford University Press},
	author = {Matthews, Gerald and Wohleber, Ryan W. and Lin, Jinchao},
	date = {2020},
	keywords = {*Competence, *Experience Level, *Stress, Cognitive Ability, Perceptual Motor Processes},
}

@article{paas_cognitive_2003,
	title = {Cognitive Load Measurement as a Means to Advance Cognitive Load Theory},
	volume = {38},
	issn = {0046-1520},
	url = {https://doi.org/10.1207/S15326985EP3801_8},
	doi = {10.1207/S15326985EP3801_8},
	pages = {63--71},
	number = {1},
	journaltitle = {Educational Psychologist},
	shortjournal = {Educational Psychologist},
	author = {Paas, Fred and Tuovinen, Juhani E. and Tabbers, Huib and Van Gerven, Pascal W. M.},
	date = {2003-01-01},
	note = {Publisher: Routledge},
}

@article{paas_instructional_1994,
	title = {Instructional control of cognitive load in the training of complex cognitive tasks},
	volume = {6},
	pages = {351--371},
	journaltitle = {Educational psychology review},
	author = {Paas, Fred {GWC} and Van Merriënboer, Jeroen {JG}},
	date = {1994},
	note = {Publisher: Springer},
}

@book{phillips_how_2022,
	title = {How to Get a {PhD}: A Handbook for Students and Their Supervisors 7e},
	publisher = {{McGraw}-Hill Education ({UK})},
	author = {Phillips, Estelle and Johnson, Colin},
	date = {2022},
}

@misc{burman_finish_2018,
	title = {Finish on Time: The Doctoral Student Handbook},
	publisher = {Stockholm: Finish on Time Publications},
	author = {Burman, Å},
	date = {2018},
}

@book{emerson_writing_2011,
	location = {Chicago},
	title = {Writing ethnographic fieldnotes},
	isbn = {978-0-226-20683-7},
	series = {Chicago guides to writing, editing, and publishing},
	publisher = {University of Chicago Press},
	author = {Emerson, Robert M. and Fretz, Rachel I. and Shaw, Linda L.},
	date = {2011},
	keywords = {Academic writing, Authorship, Ethnology, Etnologi, Fältarbete, Fieldwork, forskning, Research, sao},
}

@book{kvale_interviews_2009,
	location = {Los Angeles},
	title = {{InterViews}: learning the craft of qualitative research interviewing},
	isbn = {978-0-7619-2541-5},
	publisher = {Sage Publications},
	author = {Kvale, Steinar and Brinkmann, Svend},
	date = {2009},
	keywords = {agrovoc, Interviewing, Interviewing in sociology, interviews, Interviews as topic, Intervjuteknik, Kvalitativ metod, Methodology, methods, metodik, qualitative analysis, Qualitative research, Research, Samhällsvetenskaplig forskning, sao, sociology, Sociology, standards},
}

@article{maranges_comparing_2017,
	title = {Comparing cognitive load and self-regulatory depletion: Effects on emotions and cognitions},
	volume = {51},
	issn = {0959-4752},
	url = {https://www.sciencedirect.com/science/article/pii/S095947521630202X},
	doi = {10.1016/j.learninstruc.2016.10.010},
	abstract = {Prior research has found both similar and different effects of self-regulatory resource depletion and cognitive load. To resolve these seeming contradictions, we experimentally compared the effects of cognitive load and self-regulatory depletion. Ego depletion led participants to pay more attention to pain and to persist less on a pain test, whereas load had opposite effects (Study 1). Load distracted people from processing and reacting to negative emotional content of pictures (Study 2), and boosted positive feelings even without an overt emotion induction (Study 3), whereas depletion did not change how people felt relative to control. Depletion and load had equivalent null effects on visual recognition memory (Study 2) but different effects on semantic processing involving emotional connections (Study 3). Taken together, results suggest that load distracts attention away from, whereas ego depletion undermines top-down control over the processing of pain and negatively-valenced content. We discuss implications for learning and instruction.},
	pages = {74--84},
	journaltitle = {Bridging Cognitive Load and Self-Regulated Learning Research},
	shortjournal = {Learning and Instruction},
	author = {Maranges, Heather M. and Schmeichel, Brandon J. and Baumeister, Roy F.},
	date = {2017-10-01},
	keywords = {Cognition, Cognitive load, Ego depletion, Emotions, Pain, Self-regulation},
}

@article{boekaerts_cognitive_2017,
	title = {Cognitive load and self-regulation: Attempts to build a bridge},
	volume = {51},
	issn = {0959-4752},
	url = {https://www.sciencedirect.com/science/article/pii/S0959475217304103},
	doi = {10.1016/j.learninstruc.2017.07.001},
	abstract = {The editors of the Special Issue called for a more integrative approach to the study of cognitive load and self-regulation. The goal formulated for the Special Issue is ambitious. In my role as a constructive critic, I first summarized the findings in the 6 papers, identifying important questions and concerns that emerged while reading the papers. I also identified some general issues that need further clarification and elaboration: I argued that there is a strong need to reach consensus on the conceptualization and measurement of cognitive load and that new methodologies should be developed to capture cognitive load in real time and link it to strategy use.},
	pages = {90--97},
	journaltitle = {Bridging Cognitive Load and Self-Regulated Learning Research},
	shortjournal = {Learning and Instruction},
	author = {Boekaerts, Monique},
	date = {2017-10-01},
	keywords = {Cognitive load, Multiple measurement points, New methodologies to capture cognitive load, Self-regulation},
}

@article{song_industry-academia_2023,
	title = {Industry-academia collaboration for realism in software engineering research: Insights and recommendations},
	volume = {156},
	issn = {0950-5849},
	url = {https://www.sciencedirect.com/science/article/pii/S0950584922002440},
	doi = {10.1016/j.infsof.2022.107135},
	abstract = {Context:
Effective industry-academia collaboration may increase software engineering research relevance by increased realism, yet very challenging for reasons like confidentiality concerns, different objectives and priorities.
Objective:
We analyse industry-academia collaboration scenarios based on our own experiences as Ph.D. student and supervisor, and provide insights and recommendations to facilitate future collaborations with industry.
Method:
We first present our industry-academia collaboration experiences that span over two and a half years with different companies. Then, we analyse both facilitators and problems from those scenarios and synthesize recommendations based on that.
Results:
Five different scenarios are analysed, including both success and failure scenarios. Reflections and insights into these experiences as well as some general recommendations are presented.
Conclusion:
We believe such experiences and insights are helpful for academic researchers to pursue industry-academia collaboration. We plan to continuously report our experience and provide our suggestions for effective collaboration with industry.},
	pages = {107135},
	journaltitle = {Information and Software Technology},
	shortjournal = {Information and Software Technology},
	author = {Song, Qunying and Runeson, Per},
	date = {2023-04-01},
	keywords = {Industry-academia collaboration, Software engineering},
}

@online{morrison_better_2019,
	title = {Better Scientific Poster},
	url = {https://osf.io/ef53g/},
	author = {Morrison, Mike},
	date = {2019-03-25},
}

@inproceedings{t_kanij_new_2022,
	title = {A New Approach Towards Ensuring Gender Inclusive {SE} Job Advertisements},
	doi = {10.1145/3510458.3513016},
	eventtitle = {2022 {IEEE}/{ACM} 44th International Conference on Software Engineering: Software Engineering in Society ({ICSE}-{SEIS})},
	pages = {1--11},
	booktitle = {2022 {IEEE}/{ACM} 44th International Conference on Software Engineering: Software Engineering in Society ({ICSE}-{SEIS})},
	author = {{T. Kanij} and {J. Grundy} and {J. McIntosh} and {A. Sarma} and {G. Aniruddha}},
	date = {2022-05-22},
	note = {Journal Abbreviation: 2022 {IEEE}/{ACM} 44th International Conference on Software Engineering: Software Engineering in Society ({ICSE}-{SEIS})},
}

@misc{sobania_analysis_2023,
        title = {An Analysis of the Automatic Bug Fixing Performance of {ChatGPT}},
        rights = {{arXiv}.org perpetual, non-exclusive license},
        url = {https://arxiv.org/abs/2301.08653},
        publisher = {{arXiv}},
        author = {Sobania, Dominik and Briesch, Martin and Hanna, Carol and Petke, Justyna},
        date = {2023},
        doi = {10.48550/ARXIV.2301.08653},
        keywords = {{FOS}: Computer and information sciences, Software Engineering (cs.{SE})},
}

@inproceedings{bosu2013impact,
  title={Impact of peer code review on peer impression formation: A survey},
  author={Bosu, Amiangshu and Carver, Jeffrey C},
  booktitle={2013 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement},
  pages={133--142},
  year={2013},
  organization={IEEE}
}

@blog{statista23,
title={Number of software developers worldwide in 2018 to 2024},
url={https://www.statista.com/statistics/627312/worldwide-developer-population/},
howpublished={https://www.statista.com/statistics/627312/worldwide-developer-population/},
year={2023}
}

@inproceedings{izquierdo-cortazar_using_2017,
	address = {New York, NY, USA},
	series = {{EASE}'17},
	title = {Using {Metrics} to {Track} {Code} {Review} {Performance}},
	isbn = {978-1-4503-4804-1},
	url = {https://doi.org/10.1145/3084226.3084247},
	doi = {10.1145/3084226.3084247},
	abstract = {During 2015, some members of the Xen Project Advisory Board became worried about the performance of their code review process. The Xen Project is a free, open source software project developing one of the most popular virtualization platforms in the industry. They use a pre-commit peer review process similar to that in the Linux kernel, based on email messages. They had observed a large increase over time in the number of messages related to code review, and were worried about how this could be a signal of problems with their code review process.To address these concerns, we designed and conducted, with their continuous feedback, a detailed analysis focused on finding these problems, if any. During the study, we dealt with the methodological problems of Linux-like code review, and with the deeper issue of finding metrics that could uncover the problems they were worried about. For having a benchmark, we run the same analysis on a similar project, which uses very similar code review practices: the Linux Netdev (Netdev) project. As a result, we learned how in fact the Xen Project had some problems, but at the moment of the analysis those were already under control. We found as well how different the Xen and Netdev projects were behaving with respect to code review performance, despite being so similar from many points of view.In this paper we show the results of both analyses, and propose a comprehensive methodology, fully automated, to study Linux-style code review. We discuss also the problems of getting significant metrics to track improvements or detect problems in this kind of code review.},
	booktitle = {Proceedings of the 21st {International} {Conference} on {Evaluation} and {Assessment} in {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Izquierdo-Cortazar, Daniel and Sekitoleko, Nelson and Gonzalez-Barahona, Jesus M. and Kurth, Lars},
	year = {2017},
	note = {event-place: Karlskrona, Sweden},
	keywords = {Code review, Data mining, Software development analytics},
	pages = {214--223},
}

@misc{gitlab_upcoming_features,
	title={Upcoming features for paid tiers},
	author={Gitlab},
	year={2023},
	note={Accessed 2023-12-12},
	url={"https://about.gitlab.com/direction/paid_tiers/"}
}

@article{pascarella_information_2018,
        title = {Information {Needs} in {Contemporary} {Code} {Review}},
        volume = {2},
        issn = {2573-0142},
        url = {https://dl.acm.org/doi/10.1145/3274404},
        doi = {10.1145/3274404},
        abstract = {Contemporary code review is a widespread practice used by software engineers to maintain high software quality and share project knowledge. However, conducting proper code review takes time and developers often have limited time for review. In this paper, we aim at investigating the information that reviewers need to conduct a proper code review, to better understand this process and how research and tool support can make developers become more effective and efficient reviewers. Previous work has provided evidence that a successful code review process is one in which reviewers and authors actively participate and collaborate. In these cases, the threads of discussions that are saved by code review tools are a precious source of information that can be later exploited for research and practice. In this paper, we focus on this source of information as a way to gather reliable data on the aforementioned reviewers' needs. We manually analyze 900 code review comments from three large open-source projects and organize them in categories by means of a card sort. Our results highlight the presence of seven high-level information needs, such as knowing the uses of methods and variables declared/modified in the code under review. Based on these results we suggest ways in which future code review tools can better support collaboration and the reviewing task.},
        language = {en},
        number = {CSCW},
        urldate = {2023-12-12},
        journal = {Proceedings of the ACM on Human-Computer Interaction},
        author = {Pascarella, Luca and Spadini, Davide and Palomba, Fabio and Bruntink, Magiel and Bacchelli, Alberto},
        month = nov,
        year = {2018},
        pages = {1--27},
}

@article{h_sharp_role_2016,
        title = {The {Role} of {Ethnographic} {Studies} in {Empirical} {Software} {Engineering}},
        volume = {42},
        issn = {1939-3520},
        doi = {10.1109/TSE.2016.2519887},
        number = {8},
        journal = {IEEE Transactions on Software Engineering},
        author = {{H. Sharp} and {Y. Dittrich} and {C. R. B. de Souza}},
        month = aug,
        year = {2016},
        pages = {786--804},
}

@article{adolph_using_2011,
        title = {Using grounded theory to study the experience of software development},
        volume = {16},
        issn = {1382-3256},
        journal = {Empirical Software Engineering},
        author = {Adolph, Steve and Hall, Wendy and Kruchten, Philippe},
        year = {2011},
        note = {Publisher: Springer},
        pages = {487--513},
}

@book{hutchins1995cognition,
  title={Cognition in the Wild},
  author={Hutchins, Edwin},
  year={1995},
  publisher={MIT press}
}